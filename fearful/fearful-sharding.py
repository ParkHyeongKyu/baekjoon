# 문제
# 데이터팀 라이언은 클럽베가스의 유저들이 게임에서 이탈하는 것을 막는 일을 하고 있다.
# 라이언은 사람들이 돈을 너무 많이 잃어서 채팅에서 욕을 하면 이탈 징후로 볼 수 있겠다는 가설을 세웠다. 라이언은 이 가설을 검증하기 위해 채팅 로그를 수집하는 시스템을 설계하기로 했다.
# 채팅 로그는 데이터가 많기 때문에 여러 개의 저장소에 나누는 샤딩기법을 사용하려고 한다.
# 라이언은 각각 크기(L)가 다른 채팅 로그 N개를 M개의 샤드에 나눠 담기로 했다.
# 그런데 채팅 로그를 샤드에 나눠 담을 때 채팅 로그의 순서가 바뀌면 안된다. 채팅 로그의 특성 상 순서가 바뀌면 문맥이 바뀌어 버리기 때문이다.
# 라이언은 채팅을 저장하는 비용을 최소로 하기 위해 샤드의 저장용량을 최소로 하려고 한다. (단, 모든 샤드 용량의 크기는 같다.)
# 조건을 만족하는 샤드의 최소 크기를 구하시오.
# 예를 들어 크기가 각각 [3, 2, 1, 3]인 채팅 로그 4개가 순서대로 들어왔다고 하자. 이를 3개의 샤드에 나눠 담는다고 하면 [3] | [2, 1] | [3] 일 때 샤드 용량이 3으로 최소가 된다.

# Example 1)
#
# Input: 샤드 3개, 로그 [3, 2, 1, 3]
# Output: 최소 용량 3
# // [3] | [2, 1] | [3]
#
#
# Example 2)
# Input: 샤드 3개, 로그 [1, 2, 3, 4, 5, 6, 7]
# Output: 최소 용량 11
# // [1, 2, 3, 4] | [5, 6] | [7]
#
#
# Example 3)
# Input: 샤드 3개, 로그 [5, 7, 8, 13]
# Output: 최소 용량 13
# // [5, 7] | [8] | [13]

def sharding(n, arr):
    start = 0
    end = sum(arr)

    while start <= end:
        mid = (start + end) // 2
        cnt = 1

        s = 0
        for i in range(len(arr)):
            if s + arr[i] <= mid:
                s += arr[i]
            else:
                if arr[i] <= mid:
                    s = arr[i]
                    cnt += 1
                else:
                    cnt += len(arr)

        if cnt > n:
            start = mid + 1
        elif cnt < n:
            end = mid - 1
        else:
            answer = mid
            end = mid - 1
    return answer

print(sharding(3, [5, 7, 8, 13]))
